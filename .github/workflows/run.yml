name: run

on:
  repository_dispatch:
    types:
      - all
      - frequent
  workflow_dispatch:
    inputs:
      run_option:
        description: 'Run Option'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - frequent
  schedule:
    - cron: '19 0,6,9,12,15,18,21 * * *'
    - cron: '19 3 * * *'

permissions:
  contents: write

jobs:
  run:
    name: ${{ github.event_name }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Install
        run: pip install -r requirements.txt
      - name: Secrets üîí ü§´
        env:
          YTM_OAUTH: ${{ secrets.YTM_OAUTH }}
        run: |
          echo "$YTM_OAUTH" > oauth.json
      - name: Checkout Output
        run: |
          git fetch origin
          git checkout origin/main-output output
      - name: Run üé∂
        id: run
        env:
          INPUT_RUN_OPTION: ${{ inputs.run_option }}
          SCHEDULE_RUN_OPTION: ${{ github.event.schedule != '19 3 * * *' && 'frequent' || 'all' }}
          GITHUB_EVENT_SCHEDULE: ${{ github.event.schedule }}
          GH_TOKEN: ${{ secrets.YTM_GITHUB_TOKEN }}
        run: |
          true || üöÄ
          echo "::group::RUN_OPTION"

          RUN_OPTION='all'
          [[ -n $SCHEDULE_RUN_OPTION ]] && RUN_OPTION=$SCHEDULE_RUN_OPTION
          [[ -n $INPUT_RUN_OPTION ]] && RUN_OPTION=$INPUT_RUN_OPTION

          echo "github.event.schedule = $GITHUB_EVENT_SCHEDULE"
          echo "RUN_OPTION = $RUN_OPTION"
          echo "INPUT_RUN_OPTION = $INPUT_RUN_OPTION"
          echo "SCHEDULE_RUN_OPTION = $SCHEDULE_RUN_OPTION"
          echo "RUN_OPTION=$RUN_OPTION" >> $GITHUB_ENV
          echo "::endgroup::"

          echo "::group::python ytm-dl.py $RUN_OPTION"
          python ytm-dl.py $RUN_OPTION > $HOME/run_output
          cat $HOME/run_output
          echo "::endgroup::"

          echo "::group::update oauth secret"
          gh secret set YTM_OAUTH < oauth.json
          echo "Updated secret."
          echo "::endgroup::"

          echo "::group::github step summary"
          echo "### ‚öôÔ∏è python ytm-dl.py $RUN_OPTION" >> $GITHUB_STEP_SUMMARY
          echo ""
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat $HOME/run_output  >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for file in ./tmp/step_output/*.md; do
            cat $file >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          done
          echo "::endgroup::"

          echo "::group::determine if need to commit to output"
          git diff-index --quiet origin/main-output output/ || echo "DOCOMMIT=1" >> "$GITHUB_OUTPUT"
          echo "::endgroup::"
      - uses: actions/upload-artifact@v4
        with:
          name: api_results
          path: artifacts/api_results_*
          if-no-files-found: ignore
      - name: Commit Changes
        id: commit
        if: ${{ steps.run.outputs.DOCOMMIT == '1' }}
        run: |
          true || üë®‚Äçüíª
          echo "::group::git checkout main-output"
          cd output/
          git config --global core.autocrlf input
          git checkout main-output
          git add -f .
          echo "::endgroup::"

          if ! git diff-index --quiet HEAD; then
            echo "::group::commit & push"

            curl -s https://gist.githubusercontent.com/jwenerd/1679dda15c44739b4781cb946533381b/raw/ef35475552d2dfa2e5bb7ae49f542b39aaaa7b45/random_emoji.sh | bash -s
            RANDOM_EMOJI=$(cat /tmp/jw_rand_emoji)

            git config --global user.name "GitHub Actions"
            git config --global user.email "<>"

            git commit --message="$GITHUB_JOB($RUN_OPTION) $GITHUB_EVENT_NAME #$GITHUB_RUN_NUMBER $RANDOM_EMOJI"
            git push origin main-output

            cat ../tmp/commit_link.md | awk '{if (match($0, "__OUTPUTCOMMIT__")) {cmd="git rev-parse HEAD"; cmd | getline output; close(cmd); gsub("__OUTPUTCOMMIT__", output)} print}' >> $GITHUB_STEP_SUMMARY
            cat ../tmp/commit_link.md | awk '{if (match($0, "__OUTPUTCOMMIT__")) {cmd="git rev-parse HEAD"; cmd | getline output; close(cmd); gsub("__OUTPUTCOMMIT__", output)} print}'
            echo  "::endgroup::"

            echo "::group::tag latest-output"
            git fetch --tags --force
            git tag --force latest-output
            git push --force --tags
            echo  "::endgroup::"

            echo "::group::git count-objects"
            cd ..
            git fetch --all
            git gc
            du -h -d 0 .git
            echo "##### ‚àë git count-objects" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`$(git count-objects -vH | head -5)\n\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "::endgroup::"
          fi
